"""Ms. Harshal Lad"""
from bs4 import BeautifulSoup 
import re
import time
import requests
import sys
from time import sleep
import mysql.connector
import csv
from bs4 import BeautifulSoup 
import re
import time
import requests
import sys
import time
import json
import csv
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import time
import mysql.connector
import sys


new_prod = []
mydb = mysql.connector.connect(
  host="",
  user="",
  password="",
  database = ""
)
mycursor = mydb.cursor()
mycursor.execute("""CREATE TABLE if not exists `coastalpet_op` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `Product_Title` varchar(300) NOT NULL,
  `sku` varchar(200) NOT NULL,
  `parent_sku` varchar(200) DEFAULT NULL,
  `primary_sku` int(1) DEFAULT '1',
  `UPC` varchar(15) DEFAULT NULL,
  `EAN` varchar(12) DEFAULT NULL,
  `LMP_SKU` varchar(200) DEFAULT NULL,
  `mfg_id` varchar(30) DEFAULT NULL,
  `FF_Latency` varchar(10) DEFAULT NULL,
  `Amazon_ASIN` varchar(10) DEFAULT NULL,
  `is_change` binary(1) DEFAULT NULL,
  `notions_unit_of_sale` int(3) DEFAULT NULL,
  `previous_vnp` decimal(7,2) DEFAULT NULL,
  `fcsus_unit_of_sale` int(3) DEFAULT NULL,
  `vnp` decimal(7,2) DEFAULT NULL,
  `inward_freight` decimal(7,2) DEFAULT '0.00',
  `Product_Net_Weight_Oz` decimal(7,2) DEFAULT NULL,
  `previous_shipping_weight` decimal(7,2) DEFAULT '0.00',
  `shipping_weight` decimal(7,2) DEFAULT NULL,
  `product_introduce_date` varchar(255) DEFAULT NULL,
  `length` decimal(7,2) DEFAULT NULL,
  `width` decimal(7,2) DEFAULT NULL,
  `height` decimal(7,2) DEFAULT NULL,
  `product_description` text,
  `color` varchar(250) NOT NULL,
  `size` varchar(250) NOT NULL,
  `price_update_override` int(1) DEFAULT '0',
  `wgt_update_override` int(1) DEFAULT '0',
  `Minimum_Advertised_Price` decimal(7,2) DEFAULT NULL,
  `frt_collect` varchar(1) DEFAULT 'N',
  `image1` varchar(500) DEFAULT NULL,
  `image2` varchar(500) DEFAULT NULL,
  `image3` varchar(500) DEFAULT NULL,
  `image4` varchar(500) DEFAULT NULL,
  `image5` varchar(500) DEFAULT NULL,
  `previous_qty_avb` int(1) DEFAULT '0',
  `qty_avb` int(1) DEFAULT '0',
  `stock` int(1) DEFAULT '0',
  `category` text,
  `sub_category` text,
  `sub_sub_category` varchar(250) NOT NULL,
  `sub_sub_sub_category` varchar(250) NOT NULL,
  `Product_link` text,
  `discontinued` int(1) DEFAULT '0',
  `last_updated` varchar(255) DEFAULT NULL,
  KEY `id` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=latin1""")
def anand():

    mycursor = mydb.cursor()
    Query = ("select * from  `coastalpet_categories`where `processed` = '0'")
    mycursor.execute(Query)
    records = mycursor.fetchall()
    #print(records)
    if records != []:
        mycursor = mydb.cursor()
        mycursor.execute("UPDATE `coastalpet_op`  SET previous_vnp = vnp")
    for rows in records:
      
        url=rows[5]
        category=rows[1]
        sub_category=rows[2]
        sub_sub_category=rows[3]
        sub_sub_sub_category=rows[4]
        mycursor = mydb.cursor()     
        mycursor.execute("UPDATE `coastalpet_categories` SET `processed` = '1' WHERE page_url = %s", (url,))
        # print(url)
        headers = {'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36'}   
        response = requests.get(url, headers = headers )
        html = response.text
        soup = BeautifulSoup(html)
        productdata=soup.find_all('p',attrs = {'class':'product-listing__title--text'})
        for tag in productdata:
            
            a_element=tag.find('a')
            link=a_element.get('href')
            # print(link)
            title=''
            title=tag.text.lstrip().rstrip()
            #print(title)
            colors_array=[]
            try:
                response2 = requests.get(link, headers = headers)
            except:
                print(link)
                print(response2)

                

            html2 = response2.content
            soup2 = BeautifulSoup(html2)
            description=''
            desc_val= soup2.find_all('ul')
            for ul in desc_val:
                
                li=ul.find_all('li',attrs = {'class':'key-benefits'})
                for desc in li:
                  
                    description+=desc.text
            #print(description)
            imgdata=soup2.find_all('div',attrs = {'class':'product-details__option'})
            f = open("demofile2.txt", "w")
            f.write(str(imgdata))
            f.close()
            f = open("demofile2.txt", "r")
            file_data=f.read()
            #print(file_data)
            previous_value=''
            try:
                for i in range(1,150):
                   
                    image_val= file_data.split('data-imagepath="',i)[-1]
                    replace_c=image_val.split('"',1)[-1]
                    image=image_val.replace(replace_c,'').replace('data-imagepath="','').replace('"','')
                    
                    itemnumber_val= file_data.split('data-itemnumber="',i)[-1]
                    replace_it=itemnumber_val.split('"',1)[-1]
                    itemnumber=itemnumber_val.replace(replace_it,'').replace('data-itemnumber="','').replace('"','')
                    
                    upc_val= file_data.split('data-upc="',i)[-1]
                    replace_it=upc_val.split('"',1)[-1]
                    upc=upc_val.replace(replace_it,'').replace('data-upc="','').replace('"','')
                    
                    category_val= file_data.split("data-name=",i)[-1]
                    replace_ca=category_val.split(" d",1)[-1]
                    category_sc=category_val.replace(replace_ca,'').replace("data-name=",'').replace(" d",'').replace(title,'')
        #          print(category_sc)
                    color_val=category_sc.split(",",1)[-1]
                    size_val=color_val.split(",",1)[-1]
                    color=color_val.replace(size_val,'').replace(",",'')
                    size=size_val[:-1].replace('&quot;','"')
            
                    if upc == previous_value:
                        break
                    
                    previous_value = upc
                    price_url ='https://www.coastalpet.com/umbraco/Surface/Pricing/GetPrice'
                    data={"ItemNumber":itemnumber}
                    response3 = requests.post(price_url,data=data,headers = headers)
                    price=response3.text.replace('"$','').replace('"','')
                    # print(price)
                    if price=='0.00' or title=='':
                        discontinued=1
                    else:
                        discontinued=0
                    sku =('CP01'+itemnumber).replace(' ','')
                    try:
                        mycursor = mydb.cursor() 
                        mycursor.execute("SELECT id FROM `coastalpet_op` WHERE sku= %s", (sku,))
                        myresult = mycursor.fetchall()
        #             print(myresult)
                    except Exception as e:
                        print (e)
                    if myresult == []:
                        if '[<div class=' not in image or '[<div class=' not in itemnumber or '[<div class=' not in upc:
                           
                            new_prod.append(sku)
                            mycursor = mydb.cursor()
                            val=list(zip((title,),(sku,),(sku,),(upc,),(price,),(color,),(size,),(description,),(image,),(category,),(sub_category,),(sub_sub_category,),(sub_sub_sub_category,),(link,),(discontinued,)))
            #                print(val) 
                            mycursor = mydb.cursor()
                            sql = """insert into `coastalpet_op`(`Product_Title`, `sku`, `parent_sku`,`UPC`,`vnp`,`color`,`size`,`product_description`,`image1`,`category`,`sub_category`,`sub_sub_category`,`sub_sub_sub_category`,`Product_link`,`discontinued`) values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)""" 
                            mycursor.executemany(sql,val)
                            mydb.commit()
                    else:
                        if '[<div class=' not in image or '[<div class=' not in itemnumber or '[<div class=' not in upc:
                            mycursor = mydb.cursor()
                            mycursor.execute("UPDATE `coastalpet_op` SET `vnp`= %s  WHERE sku= %s", (price,sku,)) 
                            mydb.commit()
            except Exception as e:
                print (e)
    mycursor = mydb.cursor()    
    mycursor.execute("select sku,vnp,previous_vnp from coastalpet_op")
    result = mycursor.fetchall()
    with open('coastalpet_vnp.csv', 'w',  newline='') as outcsv:
            writer = csv.writer(outcsv)
            writer = csv.DictWriter(outcsv, fieldnames = ["sku", "vnp", "previous_vnp"])
            writer.writeheader()
    with open('coastalpet_sku.csv', 'w',  newline='') as outcsv:
        writer = csv.writer(outcsv)
        writer = csv.DictWriter(outcsv, fieldnames = ["sku"])
        writer.writeheader()
    

    for x in result:
        sku=x[0]
        vnp= x[1]
        pvnp= x[2]
        if vnp!=pvnp:
            with open('coastalpet_vnp.csv', 'a', newline='') as vnpcsv:
                writer = csv.writer(vnpcsv)
                writer = csv.DictWriter(vnpcsv, fieldnames =[sku,vnp,pvnp])
                writer.writeheader()
    for i in new_prod:
        with open('coastalpet_sku.csv', 'a', newline='') as vnpcsv:
            writer = csv.writer(vnpcsv)
            writer = csv.DictWriter(vnpcsv, fieldnames =[i])
            writer.writeheader()
def mail_send(s):
    fromaddr = "anandn@fcsus.com"
    toaddr = "nishadaman4438@gmail.com"
    msg = MIMEMultipart()
    # storing the senders email address  
    msg['From'] = fromaddr
    # storing the receivers email address 
    msg['To'] = toaddr
    # storing the subject 
    msg['Subject'] = "Differences between vnp & stock(qty) "
    # string to store the body of the mail
    body = s
    msg.attach(MIMEText(body, 'plain'))
    # filename = "File_name_with_extension"
    attachment = open('./coastalpet_vnp.csv', "rb")
    
    parter1 = MIMEBase('application', 'octet-stream')
    parter1.set_payload((attachment).read())
    encoders.encode_base64(parter1)
    parter1.add_header('Content-Disposition', 'attachment', filename='coastalpet_vnp.csv')
    msg.attach(parter1)
    
    attachment = open('./coastalpet_sku.csv', "rb")
    parter2 = MIMEBase('application', 'octet-stream')
    parter2.set_payload((attachment).read())
    encoders.encode_base64(parter2)
    parter2.add_header('Content-Disposition', 'attachment', filename='coastalpet_sku.csv')
    msg.attach(parter2)
    # open the file to be sent 
    s = smtplib.SMTP('smtp.office365.com', 587)
    s.starttls()  
    # Authentication(password)
    s.login(fromaddr, 'password')
    text = msg.as_string()
    s.sendmail(fromaddr, toaddr, text)
    s.quit()
def main():
    try:
        anand()
        s = "coastalpet_op run is scuccessfull run its course "
        mail_send(s)
    except:
        s = "coastalpet_op is unscuccessfull run its course "
        mail_send(s)

if __name__ == "__main__":
    main()



